(define (count x xs)
  (define (helper x xs accum)
    (cond ((= (length xs) 0) accum)
          ((equal? x (car xs)) (helper x (cdr xs) (+ 1 accum)))
          ((not(equal? x (car xs))) (helper x (cdr xs) accum))))
  (helper x xs 0))

(define (delete pred? xs)
  (define (helper pred? xs new)
    (cond ((= (length xs) 0)(reverse new)) 
      ((pred? (car xs)) (helper pred? (cdr xs)  new))
      ((not(pred? (car xs))) (helper pred? (cdr xs) (cons (car xs) new)))))
  (helper pred? xs '()))

(define (iterate f x n)
  (define (helper f x n xs)
    (if (= n 0) (reverse xs)
        (helper f (f x) (- n 1) (cons x xs))))
  (helper f x n '()))

(define (intersperse x xs)
  (define (helper x xs new)
    (cond ((null? xs) '())
      ((= 1 (length xs)) (append new xs ))
         (else(helper x (cdr xs) (append new (cons (car xs) (list x)))))))
  (helper x xs '()))

(define (any? pred? xs)
  (define (helper pred? xs flag)
    (cond
          ((and (= flag 0) (= 0 (length xs))) #f)
          ((and (= flag 1) (= 0 (length xs))) #t)
          ((pred? (car xs))(helper pred? (cdr xs) 1))
          (else (helper pred? (cdr xs) 0))))
  (helper pred? xs 0))

(define (all? pred? xs)
    (define (helper pred? xs)
    (if (null? xs) #t
          (cond ((pred? (car xs)) (helper  pred? (cdr xs)))
                (else #f)))) (helper pred? xs))

(define(o . xs)
  (cond ((null? xs) (lambda (x) x))
        (else (lambda (x) ((car xs) ((apply o (cdr xs)) x))))))
