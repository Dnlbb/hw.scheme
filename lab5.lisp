(define (skip-loop word program accum)
  (let loop ((ind accum))
    (if (and (< ind (vector-length program)) (equal? (vector-ref program ind)
                                                     word))
        ind
        (loop (+ ind 1)))))
      

(define (interpret program stack)
  (define(help_interpret program accum stack return-stack dict)
    (cond 
      ((= accum (vector-length program)) stack)
      ((number? (vector-ref program accum))
       (help_interpret program (+ 1 accum)
                       (cons (vector-ref program accum) stack)
                       return-stack dict))
      ((equal? (vector-ref program accum) '+)
       (help_interpret program (+ 1 accum)
                       (cons (+ (cadr stack) (car stack)) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) '-)
       (help_interpret program (+ 1 accum)
                       (cons (- (cadr stack) (car stack)) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) '*)
       (help_interpret program (+ 1 accum)
                       (cons (* (cadr stack) (car stack)) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) '/)
       (help_interpret program (+ 1 accum)
                       (cons (/ (cadr stack) (car stack)) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'mod)
       (help_interpret program (+ 1 accum)
                       (cons (remainder (cadr stack) (car stack)) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'neg)
       (help_interpret program (+ 1 accum)
                       (cons (- 0 (car stack)) (cdr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) '=)
       (help_interpret program (+ 1 accum) (if (= (car stack) (cadr stack))
                                               (cons -1 (cddr stack))
                                               (cons 0 (cddr stack)))
                       return-stack dict))
      ((equal? (vector-ref program accum) '>)
       (help_interpret program (+ 1 accum) (if (> (cadr stack) (car stack))
                                               (cons -1 (cddr stack))
                                               (cons 0 (cddr stack)))
                       return-stack dict))
      ((equal? (vector-ref program accum) '<)
       (help_interpret program (+ 1 accum) (if (< (cadr stack) (car stack))
                                               (cons -1 (cddr stack))
                                               (cons 0 (cddr stack)))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'not)
       (help_interpret program (+ 1 accum)
                       (cons (if (= 0 (car stack)) 1 0) (cdr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'and)
       (help_interpret program (+ 1 accum)
                       (cons (if (and (= 1 (car stack)) (= 1 (cadr stack))) -1 0) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'or)
       (help_interpret program (+ 1 accum)
                       (cons (if (or (= 1 (car stack)) (= 1 (cadr stack))) -1 0) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'drop)
       (help_interpret program (+ 1 accum)
                       (cdr stack) return-stack dict))
      ((equal? (vector-ref program accum) 'swap)
       (help_interpret program (+ accum 1)
                       (append (list (cadr stack) (car stack)) (cddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'dup)
       (help_interpret program (+ accum 1)
                       (cons (car stack) stack) return-stack dict))
      ((equal? (vector-ref program accum) 'over)
       (help_interpret program  (+ accum 1)
                       (cons (cadr stack) stack) return-stack dict))
      ((equal? (vector-ref program accum) 'rot)
       (help_interpret program (+ 1 accum)
                       (append (list (caddr stack) (cadr stack) (car stack)) (cdddr stack))
                       return-stack dict))
      ((equal? (vector-ref program accum) 'depth)
       (help_interpret program (+ 1 accum)
                       (cons (length stack) stack) return-stack dict))
      ((equal? (vector-ref program accum) 'define)
       (help_interpret program (+ 1 (skip-loop 'end program accum))
                       stack return-stack
                       (cons (list (vector-ref program (+ accum 1)) (+ accum 2)) dict)))
      ((equal? (vector-ref program accum) 'exit) (help_interpret program
                                                                 (car return-stack) stack
                                                                 (cdr return-stack) dict))
      ((equal? (vector-ref program accum) 'end) (help_interpret program
                                                                (car return-stack) stack
                                                                (cdr return-stack) dict))
      ((equal? 'if (vector-ref program accum)) (help_interpret program (if (zero? (car stack))
                                                         (+ 1 (skip-loop 'endif program accum))
                                                         (+ accum 1)) (cdr stack) return-stack dict))
      ((equal? 'endif (vector-ref program accum)) (help_interpret program
                                                                 (+ accum 1) stack return-stack dict))
      (else (help_interpret program (cadr (assoc (vector-ref program accum)
                                                 dict)) stack (cons (+ 1 accum) return-stack) dict))))
  (help_interpret program 0 stack '() '()
