(define (discloser xs)
  (cond ((not(pair? xs)) 
         (cond ((number? xs) 0)
               ((equal? 'x xs) 1)))
        ((=(length xs) 1)
         (cond ((number? (car xs)) 0)
               ((equal? 'x (car xs)) 1)))
        ((and (equal? (car xs) '-)(equal? (cadr xs) 'x)(= 2 (length xs))) -1)
        (else(derivative xs))))

(define (derivative xs)
  (cond ((not(pair? xs)) (discloser xs))
        ((= 1 (length xs)) (discloser xs))
        ((and (equal? (car xs) '*) (= (length xs) 4))
         (list '+ (list '* (derivative (list '* (cadr xs) (caddr xs))) (cadddr xs))
               (list '* (cadr xs) (caddr xs) (discloser (cadddr xs)))))
        ((and (= 5 (length xs)) (equal? (car xs) '*) (number? (cadr xs)))
         (list '* (cadr xs) (derivative (list '* (caddr xs) (cadddr xs) (cadr(cdddr xs))))))
        ((and (= 5 (length xs)) (equal? (car xs) '*))
         (list '+ (list '* (derivative (list '* (cadr xs) (caddr xs)))
                        (cadddr xs) (cadr(cdddr xs)))
               (list '* (cadr xs) (caddr xs) (derivative (list '* (cadddr xs)
                                                               (cadr(cdddr xs)))))))
        ((and (equal? (car xs) '-)(equal? (cadr xs) 'x)(<= (length xs) 2))  (discloser xs))
        ((and (equal? (car xs) '*) (number? (cadr xs)) (> (length xs) 3))
         (list '*  (discloser (cons '* (cddr xs)))))
        ((and (equal? (car xs) '*) (number? (cadr xs)))
         (list '* (cadr xs) (discloser (caddr xs))))
        ((equal? (car xs) '*) 
         (list '+ (list '* (discloser (cadr xs)) (caddr xs))
               (list '* (cadr xs) (discloser (caddr xs)))))
        ((equal? (car xs) '/)
         (list '/ (list '- (list '* (discloser (cadr xs)) (caddr xs))
                        (list '* (cadr xs) (discloser (caddr xs))))
               (list 'expt (caddr xs) 2)))
        ((equal? (car xs) '+)
         (list '+ (discloser (cadr xs)) (discloser (caddr xs))))
        ((equal? (car xs) '-)
         (list '- (discloser (cadr xs)) (discloser (caddr xs))))
        ((equal? (car xs) 'log)
         (list '/ (discloser (cadr xs)) (cadr xs)))
        ((and (equal? (car xs) 'expt) (equal? (cadr xs) 'x))
         (list '* (caddr xs) (list 'expt (cadr xs) (- (caddr xs) 1))))
        ((equal? (car xs) 'exp)
         (list '* (list 'exp (cadr xs)) (discloser (cadr xs))))
        ((and (equal? (car xs) 'expt) (number? (cadr xs)))
         (list '* xs (list 'log (cadr xs))))
        ((equal? (car xs) 'sin)
         (list '* (list 'cos (cadr xs)) (discloser (cadr xs))))
        ((equal? (car xs) 'cos)
         (list '* (list '- (list 'sin (cadr xs))) (discloser (cadr xs))))))
