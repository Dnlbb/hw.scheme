(define (string-trim-left str)
  (define (stl-helper lst)
    (cond  ((equal? (car lst) #\space) (stl-helper (cdr lst)))
           ((equal? (car lst) #\tab) (stl-helper (cdr lst)))
           ((equal? (car lst) #\newline) (stl-helper (cdr lst)))
           (else (list->string lst))))
  (stl-helper (string->list str)))
;;O(n)

(define (string-trim-right str)
  (define (stl-helper lst)
    (cond  ((equal? (car lst) #\space) (stl-helper (cdr lst)))
           ((equal? (car lst) #\tab) (stl-helper (cdr lst)))
           ((equal? (car lst) #\newline) (stl-helper (cdr lst)))
           (else (list->string (reverse lst)))))
  (stl-helper (reverse (string->list str))))
;;O(n)
(define (string-trim-left* str)
  (define (stl-helper lst)
    (cond  ((equal? (car lst) #\space) (stl-helper (cdr lst)))
           ((equal? (car lst) #\tab) (stl-helper (cdr lst)))
           ((equal? (car lst) #\newline) (stl-helper (cdr lst)))
           (else (list->string lst))))
  (stl-helper (string->list str)))


(define (string-trim-right* str)
  (define (stl-helper lst)
    (cond  ((equal? (car lst) #\space) (stl-helper (cdr lst)))
           ((equal? (car lst) #\tab) (stl-helper (cdr lst)))
           ((equal? (car lst) #\newline) (stl-helper (cdr lst)))
           (else (list->string (reverse lst)))))
  (stl-helper (reverse (string->list str))))

(define (string-trim str)
  (string-trim-left*  (string-trim-right* str)))
;;O(n)

(define (string-prefix? prefix str)
  (define (string-prefix-helper lst1 lst2)
    (cond ((> (length lst1) (length lst2)) #f)
          ((null? lst1) #t)
          ((equal? (car lst1) (car lst2))
           (string-prefix-helper (cdr lst1) (cdr lst2)))
          (else #f)))
  (string-prefix-helper (string->list prefix) (string->list str)))
;;O(n*m)


(define (string-suffix? suffix str)
  (define (string-suffix-helper lst1 lst2)
    (cond ((> (length lst1) (length lst2)) #f)
          ((null? lst1) #t)
          ((equal? (car lst1) (car lst2))
           (string-suffix-helper (cdr lst1) (cdr lst2)))
          (else #f)))
  (string-suffix-helper (reverse(string->list suffix))
                        (reverse(string->list str))))
;;O(n*m)
(define (completer a b)
  (cond ((> (length a) (length b))  #f)
        ((null? a) #t)
        ((equal? (car a) (car b)) (completer (cdr a) (cdr b)))
        (else #f)))
 
(define (string-infix? infix str)
  (define (string-infix-helper lst1 lst2)
    (cond   ((null? lst1) #t)
            ((null? lst2) #f)
            ((and(eq? (car lst1) (car lst2))
                 (completer (cdr lst1) (cdr lst2))) #t )
            (else(string-infix-helper lst1 (cdr lst2)))))
  (string-infix-helper (string->list infix) (string->list str)))
;;O(n*m)

(define (string-infix-mod? lst2 lst1)
  (cond ((null? lst2) #f)
        ((equal? (car lst1) (car lst2))
         (completer (cdr lst1) (cdr lst2)))
        (else #f)))

(define (deleter str ind)
  (define (deleter-helper str ind res)
    (cond ((> ind 0) (deleter-helper (cdr str)
                                     (- ind 1) (cons (car str) res)))
          (else  str)))
  (deleter-helper str ind '()))


(define (completerm str ind res)
  (define (completer-helper str ind res)
    (cond ((> ind 0) (completer-helper (cdr str)
                                       (- ind 1) (cons (car str) res)))
          (else (reverse res))))
  (completer-helper str ind res))
(define (symbol-to-string-list symbol-list)
  (map (lambda (symbol)
         (string symbol)) 
       symbol-list))

(define (string-split str sep)
  (define (string-split-helper str sep res)
    (cond ((null? str) (symbol-to-string-list (reverse res)))
          ((and (equal? (car str) (car sep)) (string-infix-mod? str sep))
           (string-split-helper (deleter str (length sep)) sep res))
          (else (string-split-helper (cdr str) sep (cons (car str) res)))))
  (string-split-helper (string->list str) (string->list sep) '()))
;;O(n*m)
